" Plugin manager

call plug#begin('~/.vim/plugged')

Plug 'scrooloose/nerdcommenter'
Plug 'mbbill/undotree'
Plug 'PProvost/vim-ps1'
Plug 'tpope/vim-fugitive'
Plug 'klen/python-mode'
Plug 'Valloric/YouCompleteMe'
Plug 'tpope/vim-surround'
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
Plug 'octol/vim-cpp-enhanced-highlight'

call plug#end()


set timeout timeoutlen=200 ttimeoutlen=100

let mapleader = ","
let g:mapleader = ","

" Set clipboard for system clipboard
set clipboard=unnamedplus

" Disable completion docs buffer
set completeopt-=preview

" Change window navigation
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Relative line number
set relativenumber

" Deoplete
let g:deoplete#enable_at_startup = 1

" Write with sudo
cmap w!! w !sudo tee > /dev/null %

" Syntax Highlighting
syntax on 
colorscheme Chasing_Logic

filetype plugin indent on 
set tabstop=4
set shiftwidth=4
set smarttab

" Set Statusline
set laststatus=2
set statusline=%.20f
set statusline+=\ %l/%L
set statusline+=:%c

" Searchtasks
let g:tlTokenList = ['TODO','FIXME']

" Pymode
let g:pymode_doc = 0
let g:pymode_doc_bind=''
let g:pymode_lint_on_fly = 1
let g:pymode_lint_ignore = "E501,E231,E225,E262,E251,E261,E302"
let g:pymode_lint_cwindow = 0

"" Deoplete
let g:deoplete#enable_at_startup = 0
let g:deoplete#enable_ignore_case = 1
let g:deoplete#auto_complete_start_length = 0

" Clang_complete
let g:clang_library_path = '/Library/Developer/CommandLineTools/usr/lib/libclang.dylib'

" Undofile
set undofile
set undodir=~/.vim/undodir
if has('persistent_undo')
    set rtp+=~/configit/vim/modules/undotree
    nnoremap <silent> <Space>u :UndotreeToggle<CR>
    let g:undotree_SetFocusWhenToggle = 1
    set undofile
    set undodir=~/.undodir/
    set undolevels=1000
    set undoreload=10000
endif

" Undotree
nnoremap <C-u> :UndotreeToggle<cr>

" undotree window width
if !exists('g:undotree_SplitWidth')
    let g:undotree_SplitWidth = 30
endif

" NerdCommenter settings
let g:NERDDefaultAlign = 'left'
let g:NERDCommentEmptyLines = 1
map <leader>/ <Plug>NERDCommenterInvert

" Reload
nmap <leader>vr :source ~/.vimrc<cr>

" Close vim if NerdTree is only buffer
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif


set hlsearch

" Clear trailing whitespace in selected file types on save
autocmd BufWritePre *.py,*.js,*.hs,*.html,*.css,*.scss :%s/\s\+$//e
